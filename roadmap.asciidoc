---
layout: page-menu
title: Debezium Roadmap
permalink: /roadmap/
---
:linkattrs:
:icons: font
:source-highlighter: highlight.js

This page describes the roadmap for upcoming work on Debezium.

Debezium is community-driven and as such the roadmap constantly evolves to reflect the users needs and contributions.
You can find a fine-grained list of planned issues and feature requests in our https://issues.redhat.com/browse/DBZ[issue tracker],
but this page is a good starting point to see where we are going.

This roadmap is subject to changes.
Please get https://groups.google.com/forum/#!forum/debezium[in touch] if you think anything important is missing on the roadmap.

[NOTE]
====
The Debezium community pursues a time-boxed release scheme: minor releases (1.2, 1.3, etc.) are done at the end of every quarter,
with preview releases (1.3.0.Alpha1, 1.3.0.Beta1, etc.) every three weeks.
As our engineering capacity is limited, we're focusing our efforts on a single release line at a time (e.g. 1.3),
i.e. patch releases for the current stable minor release (e.g. 1.2.1.Final) are done in case of critical bug fixes only.
====

== 2.5 - December 2023

* MariaDB first-class source connector implementation
* Parallelization of Debezium Embedded Engine
* Continued work on Debezium Operator for Kubernetes
* Kafka 3.6 support
* Exactly-Once support for other connectors
* Improvements to OpenLogReplicator Oracle integration
* Enhanced watermark support for signal table / incremental snapshots
* Db2 for z/OS and iSeries
* Batch support for JDBC sink connector
* Support for large BSONDocuments with MongoDB 6+
* Oracle 23 support (preview)
* Continued improvements to Debezium UI
* Debezium Server support in Debezium UI (preview)

== 2.6 - March 2024

* Official MariaDB connector
* Oracle hybrid mining strategy
* Oracle XML data type support
* Sink connector for MongoDB
* Source connector for InfluxDB time series database
* R&D to determine feasibility of using SQL Server transaction logs rather than capture instances
* Db2 iSeries source connector
* Unify snapshot modes across all connectors
* User-friendly offset manipulation (i.e, start at a specific position in the transaction logs)
* Additional monitoring
* Introduce asynchronous-based processing in Debezium Engine
* Debezium UI
** Incremental Snapshot interface
** Quick-start connector deployment
** Support varied Kafka Connect and Debezium versions
* Debezium Operator
** Promoted to stable
** OLM/Helm installation
** Integration with Distribution Builder
* Expand Oracle 23c support
* Oracle OpenLogReplicator support for XML data types
* Deprecate Oracle 12.x support

== 2.7 - June 2024

* Introduce an SPI to reduce memory footprint for multi-tenant databases with identical schemas
* Explore and provide building blocks for implementing CQRS architectures based on change data streams
* Create PoC for implementing sagas (long-running business transactions spanning multiple (micro-)services) using CDC and the outbox pattern
* Read-only incremental snapshots for other relational connectors
* Debezium UI
** Offset manipulation
** Debezium Server integration via Debezium Operator
* Debezium Operator
** Improved Observability and Metrics
** R&D to consider multitasking support with Debezium Server

== 3.0 - September 2024

* Java 17 baseline
* Kafka 3.1 minimum baseline support
* New off-heap Oracle transaction buffer implementations, more details soon.
* And much more...

== 3.1 - December 2024

* Oracle 12c support sunset (best-effort moving forward).

== Future Releases

* Add schema history compaction tool
* Provide a Debezium-specific SPI for describing change event schemas
* API/SPI allowing to implement custom connectors on the foundations of Debezium
* Exploration of creating aggregated events, based on the streams/data from multiple tables, so to enable use cases which need to incorporate data from multiple tables into a single output structure (e.g. an Elasticsearch document containing order and orderline info)
* Support for Infinispan as a source
* Allow to propagate custom contextual data in change messages (e.g. the business user doing a certain change)
* Provide more detailed monitoring information about Debezium's internal state and health via JMX (e.g. to spot loss of DB connection while the connector still is running)
* Explore publication of change events via reactive data streams (on top of embedded connector)
* New implementation of the Debezium embedded engine independent of Kafka Connect APIs
* Debezium UI - New CLI tooling

== Past Releases

Please see the link:/releases[releases overview] page to learn more about the contents of past Debezium releases.
